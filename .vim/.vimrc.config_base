"==========================================
" Sections:
"       -> Initial Plugin 加载插件
"       -> General Settings 基础设置
"       -> Display Settings 展示/排版等界面格式设置
"       -> FileEncode Settings 文件编码设置
"       -> Others 其它配置
"       -> HotKey Settings  自定义快捷键
"       -> FileType Settings  针对文件类型的设置
"       -> Theme Settings  主题设置
"
"==========================================

" ###################  基本设置 ###################
" 允许插件 启动自动补全
filetype on
filetype indent on
filetype plugin on
filetype plugin indent on
" 文件修改之后自动载入。
set autoread
" 启动的时候不显示那个援助索马里儿童的提示
set shortmess=atI
" 突出显示当前行
" set cursorline
"设置 退出vim后，内容显示在终端屏幕, 可以用于查看和复制
"好处：误删什么的，如果以前屏幕打开，可以找回
set t_ti= t_te=
" disable mouse usage
" set mouse=a

set selection=inclusive
set selectmode=mouse,key
" change the terminal's title
set title
" don't beep
set novisualbell
set noerrorbells
set t_vb=
set tm=500
" Remember info about open buffers on close
set viminfo^=%
" For regular expressions turn magic on
set magic
" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l
set autochdir

"==========================================
"	Display Settings 展示/排版等界面格式设置
"==========================================
syntax on
" 显示当前的行号列号
set ruler
" 在状态栏显示正在输入的命令
set showcmd
" 左下角显示当前vim模式
set scrolloff=3
" 一行宽度
set winwidth=79
" 命令行（在状态行下）的高度，默认为1，这里是2
" Hide the default mode text (e.g. -- INSERT -- below the statusline)
set noshowmode
" Always show the status line - use 2 lines for the status bar
set laststatus=2
" These lines setup the environment to show graphics and colors correctly.
set nocompatible
set t_Co=256
" 显示行号
set number
" 换行
set wrap
" 按词换行
set lbr
" 括号配对情况,跳转并高亮一下匹配的括号
set showmatch
set matchtime=2


" ##### 设置文内智能搜索提示
" 高亮search命中的文本
" set hlsearch
" 打开增量搜索模式,随着键入即时搜索
"set incsearch
" 搜索时忽略大小写
set ignorecase
" 有一个或以上大写字母时仍大小写敏感
" set smartcase


" ##### 代码折叠
" za，打开或关闭当前折叠；zM，关闭所有折叠；zR，打开所有折叠。
set foldenable
" 折叠方法
" manual    手工折叠
" indent    使用缩进表示折叠
" expr      使用表达式定义折叠
" syntax    使用语法定义折叠
" diff      对没有更改的文本进行折叠
" marker    使用标记进行折叠, 默认标记是 {{{ 和 }}}
" set foldmethod=indent
set foldmethod=syntax
" set foldmethod=manual
set foldlevel=99
set foldtext='\ \ {...}'
set fillchars=fold:\ 
set confirm
hi Folded ctermbg=none ctermfg=darkgrey
" 代码折叠自定义快捷键
let g:FoldMethod = 0
map <leader>zz :call ToggleFold()<cr>
fun! ToggleFold()
    if g:FoldMethod == 0
        exe "normal! zM"
        let g:FoldMethod = 1
    else
        exe "normal! zR"
        let g:FoldMethod = 0
    endif
endfun

" ##### 缩进配置
set smartindent
set autoindent
set ts=4
set sw=4
set expandtab

" 按退格键时可以一次删掉 4 个空格
set softtabstop=4
" insert tabs on the start of a line according to shiftwidth, not tabstop 按退格键时可以一次删掉 4 个空格
set smarttab
" 缩进时，取整 use multiple of shiftwidth when indenting with '<' and '>'
set shiftround

" ##### A buffer becomes hidden when it is abandoned
set hidden
set wildmode=list:longest
set ttyfast

" ##### 00x增减数字时使用十进制
set nrformats=


"==========================================
" FileEncode Settings 文件编码,格式
"==========================================
" 设置新文件的编码为 UTF-8
set encoding=utf-8
" 自动判断编码时，依次尝试以下编码：
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1
set helplang=en
"set langmenu=zh_CN.UTF-8
"set enc=2byte-gb18030
" 这句只影响普通模式 (非图形界面) 下的 Vim。
set termencoding=utf-8
" Use Unix as the standard file type
set ffs=unix,dos,mac
" 如遇Unicode值大于255的文本，不必等到空格再折行
set formatoptions+=m
" 合并两行中文时，不在中间加空格
set formatoptions+=B

"==========================================
" others 其它设置
"==========================================
" vimrc文件修改之后自动加载。 linux。
autocmd! bufwritepost .vimrc source %
" 自动补全配置
set completeopt=longest,menu
" 增强模式中的命令行自动完成操作
set wildmenu
" set wildignore=*.swp,*.bak,*.pyc,*.class,.svn,*.o,*.obj
set wildignore=*.o,*~,*.pyc,*.class		" Ignore compiled files
" 离开插入模式后自动关闭预览窗口
autocmd InsertLeave * if pumvisible() == 0|pclose|endif
" 回车即选中当前项
" inoremap <expr> <CR>       pumvisible() ? "\<C-y>" : "\<CR>"
"
" if this not work ,make sure .viminfo is writable for you
if has("autocmd")
    au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

"==========================================
" OCaml settings
" <C-x><C-o> given a prefix, it will suggest all the elements of the current
"            environment matching the given prefix and display their type.
"==========================================
let g:opamshare = substitute(system('opam config var share'),'\n$','','''')
execute "set rtp+=" . g:opamshare . "/merlin/vim"
let g:syntastic_ocaml_checkers = ['merlin']


"==========================================
" HotKey Settings  自定义快捷键设置
"==========================================
"
" ##### 分屏窗口移动 在vim的各个窗口间切换
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

map ,p "+p

noremap H ^
noremap L $

" ##### 搜索相关
" 进入搜索Use sane regexes"
" nnoremap / /\v
" vnoremap / /\v
" Keep search pattern at the center of the screen."
nnoremap <silent> n nzz
nnoremap <silent> N Nzz
nnoremap <silent> * *zz
nnoremap <silent> # #zz
nnoremap <silent> g* g*zz

" remap U to <C-r> for easier redo
nnoremap U <C-r>

"==========================================
" Theme Settings  主题设置
"==========================================
" Set extra options when running in GUI mode
if has("gui_running")
    set guifont=Monaco:h14
    if has("gui_gtk2")   "GTK2
        set guifont=Monaco\ 12,Monospace\ 12
    endif
    set showtabline=1
    set linespace=2
    set noimd
endif
" 具体的主题插件参考 .vimrc.bundles 文件
" ##### theme主题

"设置标记一列的背景颜色和数字一行颜色一致
hi! link SignColumn   LineNr
hi! link ShowMarksHLl DiffAdd
hi! link ShowMarksHLu DiffChange

"" for error highlight，防止错误整行标红导致看不清
highlight clear SpellBad
highlight SpellBad term=standout ctermfg=1 term=underline cterm=underline
highlight clear SpellCap
highlight SpellCap term=underline cterm=underline
highlight clear SpellRare
highlight SpellRare term=underline cterm=underline
highlight clear SpellLocal
highlight SpellLocal term=underline cterm=underline


set term=screen-256color

" 标签映射
" 生成系统 头文件的 tags
set tags+=~/tools_config/.vim/systags
set tags+=~/tools_config/.vim/systags_local
" map <leader><F12> :call Do_CsTag_Sys()<CR>
map <leader><leader>T :call Do_CsTag_Sys()<CR>
function! Do_CsTag_Sys()
    delete("~/tools_config/.vim/systags")
    " 本地自定义的头文件目录标签文件
    delete("~/tools_config/.vim/systags_local")
    silent! execute "!ctags -R -f ~/tools_config/.vim/systags -L ~/tools_config/.vim/tags_list"
    " 需要自己新建 tags_list_local 文件，用以指示自定义的头文件目录
    silent! execute "!ctags -R -f ~/tools_config/.vim/systags_local -L ~/tools_config/.vim/tags_list_local"
endfunction

" 使用 gf 跳转到对应的include文件
if has("mac")
    set path=.,/usr/local/include
    set path+=,/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk/usr/include
    set path+=,/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk/usr/include/c++/4.2.1
elseif has("linux")|| has("unix")
    set path=.,/usr/include,/usr/local/include
endif

" 生成当前项目的 tags
map <leader>T :call Do_CsTag()<CR>
nmap <C-s>s :cs find s <C-R>=expand("<cword>")<CR><CR>:copen<CR>
nmap <C-s>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-s>c :cs find c <C-R>=expand("<cword>")<CR><CR>:copen<CR>
nmap <C-s>t :cs find t <C-R>=expand("<cword>")<CR><CR>:copen<CR>
nmap <C-s>e :cs find e <C-R>=expand("<cword>")<CR><CR>:copen<CR>
nmap <C-s>f :cs find f <C-R>=expand("<cfile>")<CR><CR>:copen<CR>
nmap <C-s>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>:copen<CR>
nmap <C-s>d :cs find d <C-R>=expand("<cword>")<CR><CR>:copen<CR>
function! Do_CsTag()
    let dir = getcwd()
    if filereadable("tags")
        if(g:iswindows==1)
            let tagsdeleted=delete(dir."\\"."tags")
        else
            let tagsdeleted=delete("./"."tags")
        endif
        if(tagsdeleted!=0)
            echohl WarningMsg | echo "Fail to do tags! I cannot delete the tags" | echohl None
            return
        endif
    endif
    if has("cscope")
        silent! execute "cs kill -1"
    endif
    if filereadable("cscope.files")
        if(g:iswindows==1)
            let csfilesdeleted=delete(dir."\\"."cscope.files")
        else
            let csfilesdeleted=delete("./"."cscope.files")
        endif
        if(csfilesdeleted!=0)
            echohl WarningMsg | echo "Fail to do cscope! I cannot delete the cscope.files" | echohl None
            return
        endif
    endif
    if filereadable("cscope.out")
        if(g:iswindows==1)
            let csoutdeleted=delete(dir."\\"."cscope.out")
        else
            let csoutdeleted=delete("./"."cscope.out")
        endif
        if(csoutdeleted!=0)
            echohl WarningMsg | echo "Fail to do cscope! I cannot delete the cscope.out" | echohl None
            return
        endif
    endif
    if(executable('ctags'))
        silent! execute "!ctags --exclude=branches  -R --c++-kinds=+p --fields=+iaS --extra=+q ."
    endif
    if(executable('cscope') && has("cscope") )
        if(g:iswindows!=1)
            silent! execute "!find . -name '*.h' -o -name '*.c' -o -name '*.cpp' -o -name '*.java' -o -name '*.cs' '*.py' '*.sh' > cscope.files"
        else
            silent! execute "!dir /s/b *.c,*.cpp,*.h,*.java,*.cs,*.py,*.sh >> cscope.files"
        endif
        silent! execute "!cscope -b"
        execute "normal :"
        if filereadable("cscope.out")
            execute "cs add cscope.out"
        endif
    endif
endfunction

" 在当前文件中快速查找光标下的单词
nmap <leader>lv :lv /<c-r>=expand("<cword>")<cr>/ %<cr>:lw<cr>

" 在处理未保存或只读文件的时候，弹出确认
set confirm

set list
set lcs=tab:\|\ ,nbsp:% ",trail:-
